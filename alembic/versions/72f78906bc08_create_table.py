"""create table

Revision ID: 72f78906bc08
Revises: 
Create Date: 2024-05-14 09:14:37.095527

"""
from typing import Sequence

from alembic import op
import sqlalchemy as sa
import sqlmodel


# revision identifiers, used by Alembic.
revision: str = '72f78906bc08'
down_revision: str | None = None
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('customer',
    sa.Column('customerId', sa.Integer(), nullable=False),
    sa.Column('fName', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('lName', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('phoneNumber', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('email', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('billingAddress', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('physicalAddress', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('lastPaymentDate', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('lastServiceDate', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('comments', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.PrimaryKeyConstraint('customerId')
    )
    op.create_table('employee',
    sa.Column('empId', sa.Integer(), nullable=False),
    sa.Column('fName', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('lName', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('birthDate', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('phoneNumber', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('email', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('address', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('laborRate', sa.Float(), nullable=False),
    sa.Column('weeklyHours', sa.Float(), nullable=False),
    sa.PrimaryKeyConstraint('empId')
    )
    op.create_table('invoice',
    sa.Column('invoiceId', sa.Integer(), nullable=False),
    sa.Column('customerId', sa.Integer(), nullable=False),
    sa.Column('lotSize', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('invoiceDate', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('dueDate', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('emailStatus', sa.Boolean(), nullable=False),
    sa.Column('productsUsed', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('acceptedBy', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('applyTax', sa.Boolean(), nullable=False),
    sa.Column('taxAmount', sa.Float(), nullable=False),
    sa.Column('totalEstimate', sa.Float(), nullable=False),
    sa.Column('paid', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['customerId'], ['customer.customerId'], ),
    sa.PrimaryKeyConstraint('invoiceId')
    )
    op.create_table('job',
    sa.Column('jobId', sa.Integer(), nullable=False),
    sa.Column('customerId', sa.Integer(), nullable=False),
    sa.Column('arrivalWindow', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('clockIn', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('clockOut', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('employeeAssigned', sa.Integer(), nullable=False),
    sa.Column('payment', sa.Boolean(), nullable=False),
    sa.Column('isOpen', sa.Boolean(), nullable=False),
    sa.Column('isClosed', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['customerId'], ['customer.customerId'], ),
    sa.ForeignKeyConstraint(['employeeAssigned'], ['employee.empId'], ),
    sa.PrimaryKeyConstraint('jobId')
    )
    op.create_table('user',
    sa.Column('userId', sa.Integer(), nullable=False),
    sa.Column('email', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('empId', sa.Integer(), nullable=False),
    sa.Column('customerId', sa.Integer(), nullable=False),
    sa.Column('password', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.ForeignKeyConstraint(['customerId'], ['customer.customerId'], ),
    sa.ForeignKeyConstraint(['empId'], ['employee.empId'], ),
    sa.PrimaryKeyConstraint('userId')
    )
    op.create_table('accounttype',
    sa.Column('accountTypeId', sa.Integer(), nullable=False),
    sa.Column('isResidential', sa.Boolean(), nullable=False),
    sa.Column('isCommercial', sa.Boolean(), nullable=False),
    sa.Column('jobId', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['jobId'], ['job.jobId'], ),
    sa.PrimaryKeyConstraint('accountTypeId')
    )
    op.create_table('expense',
    sa.Column('expenseId', sa.Integer(), nullable=False),
    sa.Column('expenseDate', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('store', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('itemsPurchased', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('totalAmount', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('reason', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('purchasedBy', sa.Integer(), nullable=False),
    sa.Column('linkedJob', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['linkedJob'], ['job.jobId'], ),
    sa.ForeignKeyConstraint(['purchasedBy'], ['employee.empId'], ),
    sa.PrimaryKeyConstraint('expenseId')
    )
    op.create_table('frequency',
    sa.Column('frequencyId', sa.Integer(), nullable=False),
    sa.Column('serviceFrequency', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('jobId', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['jobId'], ['job.jobId'], ),
    sa.PrimaryKeyConstraint('frequencyId')
    )
    op.create_table('servicearea',
    sa.Column('serviceAreaId', sa.Integer(), nullable=False),
    sa.Column('townServiced', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('jobId', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['jobId'], ['job.jobId'], ),
    sa.PrimaryKeyConstraint('serviceAreaId')
    )
    op.create_table('services',
    sa.Column('serviceId', sa.Integer(), nullable=False),
    sa.Column('service', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('invoiceId', sa.Integer(), nullable=False),
    sa.Column('customerId', sa.Integer(), nullable=False),
    sa.Column('jobId', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['customerId'], ['customer.customerId'], ),
    sa.ForeignKeyConstraint(['invoiceId'], ['invoice.invoiceId'], ),
    sa.ForeignKeyConstraint(['jobId'], ['job.jobId'], ),
    sa.PrimaryKeyConstraint('serviceId')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('services')
    op.drop_table('servicearea')
    op.drop_table('frequency')
    op.drop_table('expense')
    op.drop_table('accounttype')
    op.drop_table('user')
    op.drop_table('job')
    op.drop_table('invoice')
    op.drop_table('employee')
    op.drop_table('customer')
    # ### end Alembic commands ###
